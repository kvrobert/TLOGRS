import com.bmuschko.gradle.docker.tasks.image.*
import com.bmuschko.gradle.docker.tasks.container.*

plugins {
    id 'pl.allegro.tech.build.axion-release' version '1.4.0'
	id 'org.sonarqube' version '2.1'
	id "com.bmuschko.docker-java-application" version "2.6.6"
}

apply plugin: 'java'
apply plugin: 'application'

repositories {
    mavenCentral()
}

sourceCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'


scmVersion {
    versionCreator 'versionWithBranch'
}
project.version = scmVersion.version

if (!hasProperty('mainClass')) {
    ext.mainClass = mainClassName = "com.rkissvincze.tlog16rs.TLOG16RSApplication"
}


mainClassName = "com.rkissvincze.tlog16rs.TLOG16RSApplication"



dependencies {
    compile 'com.bmuschko:gradle-docker-plugin:2.6.6'
    runtime 'com.bmuschko:gradle-docker-plugin:2.6.6'
    //...other existing dependencies you have
}


run {
    args 'server', 'src/dist/config.yml'
}

docker {
    url = "unix:///var/run/docker.sock";
}

task createDockerfile(type: Dockerfile) {   
    doFirst {
        copy {
            from "src/dist"
            into "build/dist"
        }
    }

    dependsOn = [':distTar']
    destFile = project.file('build/Dockerfile')
    from "frolvlad/alpine-oraclejdk8:slim"
    maintainer 'Andras Gazdag "agazdag@precognox.com"'

    def appFolder = "/"

    runCommand "apk --update add curl tar bash wget openssl"
    runCommand "wget --no-check-certificate https://github.com/jwilder/dockerize/releases/download/v0.2.0/dockerize-linux-amd64-v0.2.0.tar.gz"
    runCommand "tar -C /usr/local/bin -xzvf dockerize-linux-amd64-v0.2.0.tar.gz"

    addFile "distributions/${project.distTar.archiveName}", "/tmp"
    runCommand "mv /tmp/${project.applicationName}-${project.version} /${project.applicationName}"
    workingDir  "${appFolder}"

    defaultCommand  'bash', '-c', 'dockerize -wait ${DB_URL/jdbc:mariadb/tcp}' + " -template /${rootProject.name}/config.yml.template:/${rootProject.name}/config.yml /${project.applicationName}/bin/${project.applicationName}   server ${project.applicationName}/config.yml"
}

dockerBuildImage {
    dependsOn createDockerfile
    inputDir = createDockerfile.destFile.parentFile
    tag = "polc/${project.name.toLowerCase()}"
}

